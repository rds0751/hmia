head(Actual)
#--------------------------------------------------------------
# Step 12: Model Evaluation
#--------------------------------------------------------------
cat("\nStep 12: Model Evaluation")
# Step 12.1: Correlation
r <- cor(Actual,Predicted )
r <- round(r,2)
r
# Step 12.2: RSquare
R <- r * r
R <- round(R,2)
R
# Step 12.3: RMSE
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
# Step 12.4: Accuracy
accuracy <- mean(abs(Actual-Predicted) <=1)
accuracy <- round(accuracy,4) *100
accuracy
# Step 12.5: Total Time
totalTime = proc.time()[3] - startTime
totalTime
# Step 12.6: Scatter Plot
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
# Step 12.7: Save evaluation resut
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
#--------------------------------------------------------------
# Step 13: Writing to file
#--------------------------------------------------------------
cat("\nStep 13: Writing to file")
# Step 13.1: Writing to file (evaluation result)
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
# Step 13.2: Writing to file (Actual and Predicted)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
#--------------------------------------------------------------
# Step 14: Saving the Model
#--------------------------------------------------------------
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
#--------------------------------------------------------------
#                           END
#--------------------------------------------------------------
head(Predicted)
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
r <- round(r,2)
r
R <- r * r
R <- round(R,2)
R
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
abs(Actual-Predicted) <=1
accuracy <- mean(abs(Actual-Predicted) <=1)
accuracy <- round(accuracy,4) *100
accuracy
accuracy <- mean(abs(Actual-Predicted) <=2)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
View(dataset)
View(result)
View(dataset)
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
View(dataset)
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
r <- round(r,2)
r
R <- r * r
R <- round(R,2)
R
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
accuracy <- mean(abs(Actual-Predicted) <=2)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
cat("\nStep 13: Writing to file")
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
r <- round(r,2)
r
R <- r * r
R <- round(R,2)
R
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
accuracy <- mean(abs(Actual-Predicted) <=30)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
cat("\nStep 13: Writing to file")
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
accuracy <- mean(abs(Actual-Predicted) <=40)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
cat("\nStep 13: Writing to file")
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet1.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
r <- round(r,2)
r
R <- r * r
R <- round(R,2)
R
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
accuracy <- mean(abs(Actual-Predicted) <=80)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
abline(lm(Actual ~ Predicted,),col="White")
dev.off()
result <- data.frame(modelName,r,R,rmse,accuracy, totalTime)[1:1,]
result
cat("\nStep 13: Writing to file")
write.csv(result, file=paste(modelName,"-Evaluation-Result.csv",sep=''), row.names=FALSE)
write.csv(data.frame(Actual,Predicted), file=paste(modelName,"-ActualPredicted-Result.csv",sep=''), row.names=FALSE)
cat("\nStep 14: Saving the Model ->",modelName)
save.image(file=paste(modelName,"-Model.RData",sep=''))
cat("\nDone")
cat("\nTotal Time Taken: ", totalTime," sec")
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(randomForest)
cat("\nStep 2: Variable Declaration")
modelName <- "randomForest"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- randomForest(formula, trainDataset, ntree=500, mtry=2)
model
cat("\nStep 10: Prediction using -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
cat("\nSTART\n")
startTime = proc.time()[3]
startTime
cat("\nStep 1: Library Inclusion")
library(rpart)
cat("\nStep 2: Variable Declaration")
modelName <- "decisionTree"
modelName
InputDataFileName="regressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
egressionDataSet.csv"
egressionDataSet.csv"
InputDataFileName
training = 50      # Defining Training Percentage; Testing = 100 - Training
cat("\nStep 3: Data Loading")
dataset <- read.csv(InputDataFileName)      # Read the datafile
dataset <- dataset[sample(nrow(dataset)),]  # Shuffle the data row wise.
head(dataset)   # Show Top 6 records
nrow(dataset)   # Show number of records
names(dataset)  # Show fields names or columns names
cat("\nStep 4: Counting dataset")
totalDataset <- nrow(dataset)
totalDataset
cat("\nStep 5: Choose Target Variable")
target  <- names(dataset)[1]   # i.e. RMSD
target
cat("\nStep 6: Choose Inputs Variable")
inputs <- setdiff(names(dataset),target)
inputs
length(inputs)
cat("\nStep 7: Select training dataset")
trainDataset <- dataset[1:(totalDataset * training/100),c(inputs, target)]
head(trainDataset)    # Show Top 6 records
nrow(trainDataset)    # Show number of train Dataset
cat("\nStep 8: Select testing dataset")
testDataset <- dataset[(totalDataset * training/100):totalDataset,c(inputs, target)]
head(testDataset)
nrow(testDataset)
cat("\nStep 9: Model Building -> ", modelName)
formula <- as.formula(paste(target, "~", paste(c(inputs), collapse = "+")))
formula
model   <- rpart(formula, trainDataset, parms=list(split="information"), control=rpart.control(usesurrogate=0, maxsurrogate=0))
model
cat("\nStep 10: Prediction using -> ", modelName)
Predicted <- predict(model, testDataset)
head(Predicted)
cat("\nStep 11: Extracting Actual")
Actual <- as.double(unlist(testDataset[target]))
head(Actual)
cat("\nStep 12: Model Evaluation")
r <- cor(Actual,Predicted )
r <- round(r,2)
r
R <- r * r
R <- round(R,2)
R
rmse <- mean(abs(Actual-Predicted))
rmse <- round(rmse,2)
rmse
accuracy <- mean(abs(Actual-Predicted) <=40)
accuracy <- mean(abs(Actual-Predicted) <=40)
accuracy <- round(accuracy,4) *100
accuracy
totalTime = proc.time()[3] - startTime
totalTime
png(filename=paste(modelName,"-ScatterPlot.png",sep=''))
plot(Actual,Predicted,main=paste("Actual Vs Predicted\n",modelName),xlab="Predicted", ylab="Actual")#, pch=19)
